{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nconst _c0 = [\"mdbScrollspy\", \"\"];\nconst _c1 = [\"*\"];\nclass MdbScrollspyLinkDirective {\n  constructor(cdRef, document) {\n    this.cdRef = cdRef;\n    this.document = document;\n    this._scrollIntoView = true;\n    this.scrollspyLink = true;\n    this.active = false;\n  }\n  get scrollIntoView() {\n    return this._scrollIntoView;\n  }\n  set scrollIntoView(value) {\n    this._scrollIntoView = value;\n  }\n  get section() {\n    return this._section;\n  }\n  set section(value) {\n    if (value) {\n      this._section = value;\n    }\n  }\n  get id() {\n    return this._id;\n  }\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n  onClick() {\n    if (this.section && this.scrollIntoView === true) {\n      this.section.scrollIntoView();\n    }\n  }\n  detectChanges() {\n    this.cdRef.detectChanges();\n  }\n  assignSectionToId() {\n    this.section = this.document.documentElement.querySelector(`#${this.id}`);\n  }\n  ngOnInit() {\n    this.assignSectionToId();\n  }\n}\nMdbScrollspyLinkDirective.ɵfac = function MdbScrollspyLinkDirective_Factory(t) {\n  return new (t || MdbScrollspyLinkDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT));\n};\nMdbScrollspyLinkDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbScrollspyLinkDirective,\n  selectors: [[\"\", \"mdbScrollspyLink\", \"\"]],\n  hostVars: 4,\n  hostBindings: function MdbScrollspyLinkDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MdbScrollspyLinkDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"scrollspy-link\", ctx.scrollspyLink)(\"active\", ctx.active);\n    }\n  },\n  inputs: {\n    scrollIntoView: \"scrollIntoView\",\n    id: [\"mdbScrollspyLink\", \"id\"]\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyLinkDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyLink]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    scrollIntoView: [{\n      type: Input\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspyLink']\n    }],\n    scrollspyLink: [{\n      type: HostBinding,\n      args: ['class.scrollspy-link']\n    }],\n    active: [{\n      type: HostBinding,\n      args: ['class.active']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', []]\n    }]\n  });\n})();\nclass MdbScrollspyService {\n  constructor() {\n    this.scrollSpys = [];\n    this.activeSubject = new Subject();\n    this.active$ = this.activeSubject;\n  }\n  addScrollspy(scrollSpy) {\n    this.scrollSpys.push(scrollSpy);\n  }\n  removeScrollspy(scrollSpyId) {\n    const scrollSpyIndex = this.scrollSpys.findIndex(spy => {\n      return spy.id === scrollSpyId;\n    });\n    this.scrollSpys.splice(scrollSpyIndex, 1);\n  }\n  updateActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n    this.setActiveLink(activeLink);\n  }\n  removeActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n    if (!activeLink) {\n      return;\n    }\n    activeLink.active = false;\n    activeLink.detectChanges();\n  }\n  setActiveLink(activeLink) {\n    if (activeLink) {\n      activeLink.active = true;\n      activeLink.detectChanges();\n      this.activeSubject.next(activeLink);\n    }\n  }\n  removeActiveLinks(scrollSpyId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    scrollSpy.links.forEach(link => {\n      link.active = false;\n      link.detectChanges();\n    });\n  }\n}\nMdbScrollspyService.ɵfac = function MdbScrollspyService_Factory(t) {\n  return new (t || MdbScrollspyService)();\n};\nMdbScrollspyService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MdbScrollspyService,\n  factory: MdbScrollspyService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbScrollspyDirective {\n  constructor(scrollSpyService) {\n    this.scrollSpyService = scrollSpyService;\n    this._destroy$ = new Subject();\n    this.activeLinkChange = new EventEmitter();\n  }\n  get id() {\n    return this._id;\n  }\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n  ngOnInit() {\n    this.activeSub = this.scrollSpyService.active$.pipe(takeUntil(this._destroy$), distinctUntilChanged()).subscribe(activeLink => {\n      this.activeLinkChange.emit(activeLink);\n    });\n  }\n  ngAfterContentInit() {\n    this.scrollSpyService.addScrollspy({\n      id: this.id,\n      links: this.links\n    });\n  }\n  ngOnDestroy() {\n    this.scrollSpyService.removeScrollspy(this.id);\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\nMdbScrollspyDirective.ɵfac = function MdbScrollspyDirective_Factory(t) {\n  return new (t || MdbScrollspyDirective)(i0.ɵɵdirectiveInject(MdbScrollspyService));\n};\nMdbScrollspyDirective.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MdbScrollspyDirective,\n  selectors: [[\"\", \"mdbScrollspy\", \"\"]],\n  contentQueries: function MdbScrollspyDirective_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MdbScrollspyLinkDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n    }\n  },\n  inputs: {\n    id: [\"mdbScrollspy\", \"id\"]\n  },\n  outputs: {\n    activeLinkChange: \"activeLinkChange\"\n  },\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  template: function MdbScrollspyDirective_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyDirective, [{\n    type: Component,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/component-selector\n      selector: '[mdbScrollspy]',\n      template: '<ng-content></ng-content>'\n    }]\n  }], function () {\n    return [{\n      type: MdbScrollspyService\n    }];\n  }, {\n    links: [{\n      type: ContentChildren,\n      args: [MdbScrollspyLinkDirective, {\n        descendants: true\n      }]\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspy']\n    }],\n    activeLinkChange: [{\n      type: Output\n    }]\n  });\n})();\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbScrollspyElementDirective {\n  constructor(_elementRef, renderer, ngZone, scrollSpyService) {\n    this._elementRef = _elementRef;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n    this.offset = 0;\n  }\n  get host() {\n    return this._elementRef.nativeElement;\n  }\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n  isElementInViewport() {\n    const scrollTop = this.container.scrollTop;\n    const elTop = this.host.offsetTop - this.offset;\n    const elHeight = this.host.offsetHeight;\n    return scrollTop >= elTop && scrollTop < elTop + elHeight;\n  }\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.removeActiveLinks(scrollSpyId);\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    }\n  }\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n  listenToScroll() {\n    this.renderer.listen(this.container, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n  ngOnInit() {\n    this.id = this.host.id;\n    if (!this.container) {\n      this.container = this._getClosestEl(this.host, '.scrollspy-container');\n    }\n    this.renderer.setStyle(this.container, 'position', 'relative');\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n  _getClosestEl(el, selector) {\n    for (; el && el !== document; el = el.parentNode) {\n      if (el.matches && el.matches(selector)) {\n        return el;\n      }\n    }\n    return null;\n  }\n}\nMdbScrollspyElementDirective.ɵfac = function MdbScrollspyElementDirective_Factory(t) {\n  return new (t || MdbScrollspyElementDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n};\nMdbScrollspyElementDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbScrollspyElementDirective,\n  selectors: [[\"\", \"mdbScrollspyElement\", \"\"]],\n  inputs: {\n    container: \"container\",\n    scrollSpyId: [\"mdbScrollspyElement\", \"scrollSpyId\"],\n    offset: \"offset\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyElementDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyElement]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: MdbScrollspyService\n    }];\n  }, {\n    container: [{\n      type: Input\n    }],\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyElement']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\nclass MdbScrollspyWindowDirective {\n  constructor(document, el, renderer, ngZone, scrollSpyService) {\n    this.document = document;\n    this.el = el;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n    this.offset = 0;\n  }\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n  isElementInViewport() {\n    const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n    const elHeight = this.el.nativeElement.offsetHeight;\n    const elTop = this.el.nativeElement.offsetTop - this.offset;\n    const elBottom = elTop + elHeight;\n    return scrollTop >= elTop && scrollTop <= elBottom;\n  }\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    } else {\n      this.scrollSpyService.removeActiveState(scrollSpyId, id);\n    }\n  }\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n  listenToScroll() {\n    this.renderer.listen(window, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n  ngOnInit() {\n    this.id = this.el.nativeElement.id;\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n}\nMdbScrollspyWindowDirective.ɵfac = function MdbScrollspyWindowDirective_Factory(t) {\n  return new (t || MdbScrollspyWindowDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n};\nMdbScrollspyWindowDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbScrollspyWindowDirective,\n  selectors: [[\"\", \"mdbScrollspyWindow\", \"\"]],\n  inputs: {\n    scrollSpyId: [\"mdbScrollspyWindow\", \"scrollSpyId\"],\n    offset: \"offset\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyWindowDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyWindow]'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: MdbScrollspyService\n    }];\n  }, {\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyWindow']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\nclass MdbScrollspyModule {}\nMdbScrollspyModule.ɵfac = function MdbScrollspyModule_Factory(t) {\n  return new (t || MdbScrollspyModule)();\n};\nMdbScrollspyModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MdbScrollspyModule\n});\nMdbScrollspyModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MdbScrollspyService]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      exports: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      providers: [MdbScrollspyService]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };\n//# sourceMappingURL=mdb-angular-ui-kit-scrollspy.mjs.map","map":{"version":3,"names":["i0","Directive","Inject","Input","HostBinding","HostListener","Injectable","EventEmitter","Component","ContentChildren","Output","NgModule","DOCUMENT","takeUntil","distinctUntilChanged","Subject","MdbScrollspyLinkDirective","constructor","cdRef","document","_scrollIntoView","scrollspyLink","active","scrollIntoView","value","section","_section","id","_id","newId","onClick","detectChanges","assignSectionToId","documentElement","querySelector","ngOnInit","ɵfac","ChangeDetectorRef","ɵdir","type","args","selector","undefined","decorators","MdbScrollspyService","scrollSpys","activeSubject","active$","addScrollspy","scrollSpy","push","removeScrollspy","scrollSpyId","scrollSpyIndex","findIndex","spy","splice","updateActiveState","activeLinkId","find","activeLink","links","link","setActiveLink","removeActiveState","next","removeActiveLinks","forEach","ɵprov","MdbScrollspyDirective","scrollSpyService","_destroy$","activeLinkChange","activeSub","pipe","subscribe","emit","ngAfterContentInit","ngOnDestroy","complete","ɵcmp","template","descendants","MdbScrollspyElementDirective","_elementRef","renderer","ngZone","offset","host","nativeElement","_scrollSpyId","isElementInViewport","scrollTop","container","elTop","offsetTop","elHeight","offsetHeight","onScroll","listenToScroll","listen","_getClosestEl","setStyle","runOutsideAngular","bind","ngAfterViewInit","setTimeout","el","parentNode","matches","ElementRef","Renderer2","NgZone","MdbScrollspyWindowDirective","body","elBottom","window","MdbScrollspyModule","ɵmod","ɵinj","declarations","exports","providers"],"sources":["/home/vishal.m/Learning/AngularTutorial/DBbook/node_modules/mdb-angular-ui-kit/fesm2020/mdb-angular-ui-kit-scrollspy.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nclass MdbScrollspyLinkDirective {\n    constructor(cdRef, document) {\n        this.cdRef = cdRef;\n        this.document = document;\n        this._scrollIntoView = true;\n        this.scrollspyLink = true;\n        this.active = false;\n    }\n    get scrollIntoView() {\n        return this._scrollIntoView;\n    }\n    set scrollIntoView(value) {\n        this._scrollIntoView = value;\n    }\n    get section() {\n        return this._section;\n    }\n    set section(value) {\n        if (value) {\n            this._section = value;\n        }\n    }\n    get id() {\n        return this._id;\n    }\n    set id(newId) {\n        if (newId) {\n            this._id = newId;\n        }\n    }\n    onClick() {\n        if (this.section && this.scrollIntoView === true) {\n            this.section.scrollIntoView();\n        }\n    }\n    detectChanges() {\n        this.cdRef.detectChanges();\n    }\n    assignSectionToId() {\n        this.section = this.document.documentElement.querySelector(`#${this.id}`);\n    }\n    ngOnInit() {\n        this.assignSectionToId();\n    }\n}\nMdbScrollspyLinkDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyLinkDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nMdbScrollspyLinkDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MdbScrollspyLinkDirective, selector: \"[mdbScrollspyLink]\", inputs: { scrollIntoView: \"scrollIntoView\", id: [\"mdbScrollspyLink\", \"id\"] }, host: { listeners: { \"click\": \"onClick()\" }, properties: { \"class.scrollspy-link\": \"this.scrollspyLink\", \"class.active\": \"this.active\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyLinkDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyLink]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { scrollIntoView: [{\n                type: Input\n            }], id: [{\n                type: Input,\n                args: ['mdbScrollspyLink']\n            }], scrollspyLink: [{\n                type: HostBinding,\n                args: ['class.scrollspy-link']\n            }], active: [{\n                type: HostBinding,\n                args: ['class.active']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', []]\n            }] } });\n\nclass MdbScrollspyService {\n    constructor() {\n        this.scrollSpys = [];\n        this.activeSubject = new Subject();\n        this.active$ = this.activeSubject;\n    }\n    addScrollspy(scrollSpy) {\n        this.scrollSpys.push(scrollSpy);\n    }\n    removeScrollspy(scrollSpyId) {\n        const scrollSpyIndex = this.scrollSpys.findIndex((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        this.scrollSpys.splice(scrollSpyIndex, 1);\n    }\n    updateActiveState(scrollSpyId, activeLinkId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        const activeLink = scrollSpy.links.find((link) => {\n            return link.id === activeLinkId;\n        });\n        this.setActiveLink(activeLink);\n    }\n    removeActiveState(scrollSpyId, activeLinkId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        const activeLink = scrollSpy.links.find((link) => {\n            return link.id === activeLinkId;\n        });\n        if (!activeLink) {\n            return;\n        }\n        activeLink.active = false;\n        activeLink.detectChanges();\n    }\n    setActiveLink(activeLink) {\n        if (activeLink) {\n            activeLink.active = true;\n            activeLink.detectChanges();\n            this.activeSubject.next(activeLink);\n        }\n    }\n    removeActiveLinks(scrollSpyId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        scrollSpy.links.forEach((link) => {\n            link.active = false;\n            link.detectChanges();\n        });\n    }\n}\nMdbScrollspyService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMdbScrollspyService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyService, decorators: [{\n            type: Injectable\n        }] });\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbScrollspyDirective {\n    constructor(scrollSpyService) {\n        this.scrollSpyService = scrollSpyService;\n        this._destroy$ = new Subject();\n        this.activeLinkChange = new EventEmitter();\n    }\n    get id() {\n        return this._id;\n    }\n    set id(newId) {\n        if (newId) {\n            this._id = newId;\n        }\n    }\n    ngOnInit() {\n        this.activeSub = this.scrollSpyService.active$\n            .pipe(takeUntil(this._destroy$), distinctUntilChanged())\n            .subscribe((activeLink) => {\n            this.activeLinkChange.emit(activeLink);\n        });\n    }\n    ngAfterContentInit() {\n        this.scrollSpyService.addScrollspy({ id: this.id, links: this.links });\n    }\n    ngOnDestroy() {\n        this.scrollSpyService.removeScrollspy(this.id);\n        this._destroy$.next();\n        this._destroy$.complete();\n    }\n}\nMdbScrollspyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyDirective, deps: [{ token: MdbScrollspyService }], target: i0.ɵɵFactoryTarget.Component });\nMdbScrollspyDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MdbScrollspyDirective, selector: \"[mdbScrollspy]\", inputs: { id: [\"mdbScrollspy\", \"id\"] }, outputs: { activeLinkChange: \"activeLinkChange\" }, queries: [{ propertyName: \"links\", predicate: MdbScrollspyLinkDirective, descendants: true }], ngImport: i0, template: '<ng-content></ng-content>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyDirective, decorators: [{\n            type: Component,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/component-selector\n                    selector: '[mdbScrollspy]',\n                    template: '<ng-content></ng-content>',\n                }]\n        }], ctorParameters: function () { return [{ type: MdbScrollspyService }]; }, propDecorators: { links: [{\n                type: ContentChildren,\n                args: [MdbScrollspyLinkDirective, { descendants: true }]\n            }], id: [{\n                type: Input,\n                args: ['mdbScrollspy']\n            }], activeLinkChange: [{\n                type: Output\n            }] } });\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbScrollspyElementDirective {\n    constructor(_elementRef, renderer, ngZone, scrollSpyService) {\n        this._elementRef = _elementRef;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.scrollSpyService = scrollSpyService;\n        this.offset = 0;\n    }\n    get host() {\n        return this._elementRef.nativeElement;\n    }\n    get scrollSpyId() {\n        return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n        if (newId) {\n            this._scrollSpyId = newId;\n        }\n    }\n    isElementInViewport() {\n        const scrollTop = this.container.scrollTop;\n        const elTop = this.host.offsetTop - this.offset;\n        const elHeight = this.host.offsetHeight;\n        return scrollTop >= elTop && scrollTop < elTop + elHeight;\n    }\n    updateActiveState(scrollSpyId, id) {\n        if (this.isElementInViewport()) {\n            this.scrollSpyService.removeActiveLinks(scrollSpyId);\n            this.scrollSpyService.updateActiveState(scrollSpyId, id);\n        }\n    }\n    onScroll() {\n        this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n        this.renderer.listen(this.container, 'scroll', () => {\n            this.onScroll();\n        });\n    }\n    ngOnInit() {\n        this.id = this.host.id;\n        if (!this.container) {\n            this.container = this._getClosestEl(this.host, '.scrollspy-container');\n        }\n        this.renderer.setStyle(this.container, 'position', 'relative');\n        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.updateActiveState(this.scrollSpyId, this.id);\n        }, 0);\n    }\n    _getClosestEl(el, selector) {\n        for (; el && el !== document; el = el.parentNode) {\n            if (el.matches && el.matches(selector)) {\n                return el;\n            }\n        }\n        return null;\n    }\n}\nMdbScrollspyElementDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyElementDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: MdbScrollspyService }], target: i0.ɵɵFactoryTarget.Directive });\nMdbScrollspyElementDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MdbScrollspyElementDirective, selector: \"[mdbScrollspyElement]\", inputs: { container: \"container\", scrollSpyId: [\"mdbScrollspyElement\", \"scrollSpyId\"], offset: \"offset\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyElementDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyElement]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: MdbScrollspyService }]; }, propDecorators: { container: [{\n                type: Input\n            }], scrollSpyId: [{\n                type: Input,\n                args: ['mdbScrollspyElement']\n            }], offset: [{\n                type: Input\n            }] } });\n\nclass MdbScrollspyWindowDirective {\n    constructor(document, el, renderer, ngZone, scrollSpyService) {\n        this.document = document;\n        this.el = el;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.scrollSpyService = scrollSpyService;\n        this.offset = 0;\n    }\n    get scrollSpyId() {\n        return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n        if (newId) {\n            this._scrollSpyId = newId;\n        }\n    }\n    isElementInViewport() {\n        const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n        const elHeight = this.el.nativeElement.offsetHeight;\n        const elTop = this.el.nativeElement.offsetTop - this.offset;\n        const elBottom = elTop + elHeight;\n        return scrollTop >= elTop && scrollTop <= elBottom;\n    }\n    updateActiveState(scrollSpyId, id) {\n        if (this.isElementInViewport()) {\n            this.scrollSpyService.updateActiveState(scrollSpyId, id);\n        }\n        else {\n            this.scrollSpyService.removeActiveState(scrollSpyId, id);\n        }\n    }\n    onScroll() {\n        this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n        this.renderer.listen(window, 'scroll', () => {\n            this.onScroll();\n        });\n    }\n    ngOnInit() {\n        this.id = this.el.nativeElement.id;\n        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.updateActiveState(this.scrollSpyId, this.id);\n        }, 0);\n    }\n}\nMdbScrollspyWindowDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyWindowDirective, deps: [{ token: DOCUMENT }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: MdbScrollspyService }], target: i0.ɵɵFactoryTarget.Directive });\nMdbScrollspyWindowDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MdbScrollspyWindowDirective, selector: \"[mdbScrollspyWindow]\", inputs: { scrollSpyId: [\"mdbScrollspyWindow\", \"scrollSpyId\"], offset: \"offset\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyWindowDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyWindow]',\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: MdbScrollspyService }]; }, propDecorators: { scrollSpyId: [{\n                type: Input,\n                args: ['mdbScrollspyWindow']\n            }], offset: [{\n                type: Input\n            }] } });\n\nclass MdbScrollspyModule {\n}\nMdbScrollspyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMdbScrollspyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyModule, declarations: [MdbScrollspyDirective,\n        MdbScrollspyLinkDirective,\n        MdbScrollspyElementDirective,\n        MdbScrollspyWindowDirective], exports: [MdbScrollspyDirective,\n        MdbScrollspyLinkDirective,\n        MdbScrollspyElementDirective,\n        MdbScrollspyWindowDirective] });\nMdbScrollspyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyModule, providers: [MdbScrollspyService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MdbScrollspyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        MdbScrollspyDirective,\n                        MdbScrollspyLinkDirective,\n                        MdbScrollspyElementDirective,\n                        MdbScrollspyWindowDirective,\n                    ],\n                    exports: [\n                        MdbScrollspyDirective,\n                        MdbScrollspyLinkDirective,\n                        MdbScrollspyElementDirective,\n                        MdbScrollspyWindowDirective,\n                    ],\n                    providers: [MdbScrollspyService],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };\n//# sourceMappingURL=mdb-angular-ui-kit-scrollspy.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}