{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/admin.service\";\nimport * as i3 from \"@angular/common\";\nfunction AddRoomComponent_div_8_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"* room name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRoomComponent_div_8_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"*room name must be at least 6 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRoomComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtemplate(1, AddRoomComponent_div_8_p_1_Template, 2, 0, \"p\", 29);\n    i0.ɵɵtemplate(2, AddRoomComponent_div_8_p_2_Template, 2, 0, \"p\", 29);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.roomName == null ? null : ctx_r0.roomName.errors == null ? null : ctx_r0.roomName.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.roomName == null ? null : ctx_r0.roomName.errors == null ? null : ctx_r0.roomName.errors[\"minlength\"]);\n  }\n}\nfunction AddRoomComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtext(1, \" Room type is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRoomComponent_div_38_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtext(1, \" * Access is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRoomComponent_div_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"select\", 31)(2, \"option\", 9);\n    i0.ɵɵtext(3, \"Position\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"option\", 32);\n    i0.ɵɵtext(5, \"HOD\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"option\", 33);\n    i0.ɵɵtext(7, \"Team Lead\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"option\", 34);\n    i0.ɵɵtext(9, \"Intern\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"option\", 35);\n    i0.ɵɵtext(11, \"Product Lead\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"option\", 36);\n    i0.ɵɵtext(13, \"Project Manager\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"option\", 37);\n    i0.ɵɵtext(15, \"Engineer Manager\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(16, AddRoomComponent_div_38_div_16_Template, 2, 0, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r8 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", i_r8);\n    i0.ɵɵadvance(15);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.access == null ? null : ctx_r2.access.invalid) && ((ctx_r2.access == null ? null : ctx_r2.access.dirty) || (ctx_r2.access == null ? null : ctx_r2.access.touched)));\n  }\n}\nfunction AddRoomComponent_div_45_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Capacity is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRoomComponent_div_45_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Capacity must be at least 1.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRoomComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtemplate(1, AddRoomComponent_div_45_div_1_Template, 2, 0, \"div\", 29);\n    i0.ɵɵtemplate(2, AddRoomComponent_div_45_div_2_Template, 2, 0, \"div\", 29);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.capacity == null ? null : ctx_r3.capacity.errors == null ? null : ctx_r3.capacity.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.capacity == null ? null : ctx_r3.capacity.errors == null ? null : ctx_r3.capacity.errors[\"minlength\"]);\n  }\n}\nfunction AddRoomComponent_div_48_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵtext(1, \" image are required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddRoomComponent_div_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 38);\n    i0.ɵɵelement(1, \"input\", 39);\n    i0.ɵɵtemplate(2, AddRoomComponent_div_48_div_2_Template, 2, 0, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const image_r12 = ctx.$implicit;\n    const i_r13 = ctx.index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r4.imageUploadForm);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", i_r13);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (image_r12 == null ? null : image_r12.invalid) && ((image_r12 == null ? null : image_r12.dirty) || (image_r12 == null ? null : image_r12.touched)));\n  }\n}\nexport class AddRoomComponent {\n  constructor(formBuilder, adminService) {\n    this.formBuilder = formBuilder;\n    this.adminService = adminService;\n  }\n  ngOnInit() {\n    this.roomBookingForm = this.formBuilder.group({\n      roomName: ['', [Validators.required, Validators.minLength(6)]],\n      roomType: ['', [Validators.required, Validators.minLength(3)]],\n      access: this.formBuilder.array([this.formBuilder.control('')], [Validators.maxLength(2)]),\n      capacity: [null, [Validators.required, Validators.min(1)]],\n      image: ['', Validators.required]\n    });\n    // this.imageUploadForm = this.formBuilder.group({\n    //   images: this.formBuilder.array([this.formBuilder.control('')], Validators.required)\n    // });\n  }\n\n  get roomName() {\n    return this.roomBookingForm.get('roomName');\n  }\n  get roomType() {\n    return this.roomBookingForm.get('roomType');\n  }\n  get access() {\n    return this.roomBookingForm.get('access');\n  }\n  get capacity() {\n    return this.roomBookingForm.get('capacity');\n  }\n  get image() {\n    return this.roomBookingForm.get('image');\n  }\n  // get images(){\n  //   return this.imageUploadForm.get('images') as FormArray;\n  // }\n  selectFile(event) {\n    this.file = event.target.files[0];\n  }\n  // addImage():void{\n  //   this.images.push(this.formBuilder.control(''))\n  // }\n  addAccess() {\n    this.access.push(this.formBuilder.control(''));\n  }\n  onSubmit() {\n    let formData = new FormData();\n    formData.append(\"profilePic\", this.file, this.file.name);\n    formData.append('roomObj', JSON.stringify(this.roomBookingForm.value));\n    this.adminService.addRoom(formData).subscribe(res => {\n      console.log(res);\n    });\n  }\n}\nAddRoomComponent.ɵfac = function AddRoomComponent_Factory(t) {\n  return new (t || AddRoomComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AdminService));\n};\nAddRoomComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddRoomComponent,\n  selectors: [[\"app-add-room\"]],\n  decls: 54,\n  vars: 8,\n  consts: [[1, \"container\"], [1, \"text-center\"], [1, \"needs-validation\", \"w-50\", \"mx-auto\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"name\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"roomName\", 1, \"form-control\", \"form-input\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"roomType\", 1, \"form-label\"], [\"id\", \"roomType\", \"formControlName\", \"roomType\", 1, \"form-control\", \"form-input\"], [\"value\", \"\"], [\"value\", \"Conference Room\"], [\"value\", \"Meeting Room\"], [\"value\", \"Training Room\"], [\"value\", \"Breakout Room\"], [\"value\", \"Board Room\"], [\"value\", \"Interview Room\"], [\"value\", \"Presentation Room\"], [\"value\", \"Video Conference Room\"], [\"value\", \"Focus Room\"], [\"value\", \"Collaboration Room\"], [\"for\", \"access\"], [\"class\", \"form-group\", \"formArrayName\", \"access\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"mt-2\", \"btn\", \"btn-primary\", \"text-end\", 3, \"disabled\", \"click\"], [\"for\", \"capacity\"], [\"type\", \"number\", \"id\", \"capacity\", \"formControlName\", \"capacity\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"image\"], [\"class\", \"form-group\", \"formArrayName\", \"image\", 3, \"formGroup\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"text-center\", \"px-5\", \"mt-3\"], [1, \"text-danger\"], [4, \"ngIf\"], [\"formArrayName\", \"access\", 1, \"form-group\"], [1, \"form-control\", \"select\", 3, \"formControlName\"], [\"value\", \"HOD\"], [\"value\", \"Team Lead\"], [\"value\", \"Intern\"], [\"value\", \"Product Lead\"], [\"value\", \"Project Manager\"], [\"value\", \"Engineer Manager\"], [\"formArrayName\", \"image\", 1, \"form-group\", 3, \"formGroup\"], [\"type\", \"file\", \"id\", \"image\", 1, \"form-control\", 3, \"formControlName\"]],\n  template: function AddRoomComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n      i0.ɵɵtext(2, \"Room Adding Form\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function AddRoomComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n      i0.ɵɵtext(6, \"Room Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵtemplate(8, AddRoomComponent_div_8_Template, 3, 2, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 3)(10, \"label\", 7);\n      i0.ɵɵtext(11, \"Room Type:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"select\", 8)(13, \"option\", 9);\n      i0.ɵɵtext(14, \"-- Select Room Type --\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"option\", 10);\n      i0.ɵɵtext(16, \"Conference Room\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"option\", 11);\n      i0.ɵɵtext(18, \"Meeting Room\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"option\", 12);\n      i0.ɵɵtext(20, \"Training Room\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"option\", 13);\n      i0.ɵɵtext(22, \"Breakout Room\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"option\", 14);\n      i0.ɵɵtext(24, \"Board Room\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"option\", 15);\n      i0.ɵɵtext(26, \"Interview Room\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"option\", 16);\n      i0.ɵɵtext(28, \"Presentation Room\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"option\", 17);\n      i0.ɵɵtext(30, \"Video Conference Room\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(31, \"option\", 18);\n      i0.ɵɵtext(32, \"Focus Room\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"option\", 19);\n      i0.ɵɵtext(34, \"Collaboration Room\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(35, AddRoomComponent_div_35_Template, 2, 0, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"label\", 20);\n      i0.ɵɵtext(37, \"Access:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(38, AddRoomComponent_div_38_Template, 17, 2, \"div\", 21);\n      i0.ɵɵelementStart(39, \"button\", 22);\n      i0.ɵɵlistener(\"click\", function AddRoomComponent_Template_button_click_39_listener() {\n        return ctx.addAccess();\n      });\n      i0.ɵɵtext(40, \" Add\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(41, \"div\", 3)(42, \"label\", 23);\n      i0.ɵɵtext(43, \"Capacity:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(44, \"input\", 24);\n      i0.ɵɵtemplate(45, AddRoomComponent_div_45_Template, 3, 2, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"label\", 25);\n      i0.ɵɵtext(47, \"image:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(48, AddRoomComponent_div_48_Template, 3, 3, \"div\", 26);\n      i0.ɵɵelementStart(49, \"button\", 22);\n      i0.ɵɵlistener(\"click\", function AddRoomComponent_Template_button_click_49_listener() {\n        return ctx.addImage();\n      });\n      i0.ɵɵtext(50, \" Add\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(51, \"div\", 1)(52, \"button\", 27);\n      i0.ɵɵtext(53, \"Submit\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.roomBookingForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.roomName == null ? null : ctx.roomName.invalid) && ((ctx.roomName == null ? null : ctx.roomName.dirty) || (ctx.roomName == null ? null : ctx.roomName.touched)));\n      i0.ɵɵadvance(27);\n      i0.ɵɵproperty(\"ngIf\", (ctx.roomType == null ? null : ctx.roomType.invalid) && ((ctx.roomType == null ? null : ctx.roomType.dirty) || (ctx.roomType == null ? null : ctx.roomType.touched)));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.access == null ? null : ctx.access.controls);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.access.valid);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.capacity == null ? null : ctx.capacity.invalid) && ((ctx.capacity == null ? null : ctx.capacity.dirty) || (ctx.capacity == null ? null : ctx.capacity.touched)));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.image == null ? null : ctx.image.controls);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.image.valid);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i1.FormArrayName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","AddRoomComponent","constructor","formBuilder","adminService","ngOnInit","roomBookingForm","group","roomName","required","minLength","roomType","access","array","control","maxLength","capacity","min","image","get","selectFile","event","file","target","files","addAccess","push","onSubmit","formData","FormData","append","name","JSON","stringify","value","addRoom","subscribe","res","console","log","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/vishal.m/Learning/AngularTutorial/DBbook/src/app/admin/add-room/add-room.component.ts","/home/vishal.m/Learning/AngularTutorial/DBbook/src/app/admin/add-room/add-room.component.html"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AdminService } from 'src/app/admin.service';\n\n@Component({\n  selector: 'app-add-room',\n  templateUrl: './add-room.component.html',\n  styleUrls: ['./add-room.component.css']\n})\nexport class AddRoomComponent implements OnInit {\n\n\n  roomBookingForm!: FormGroup;\n  file!:File\n\n  constructor(private formBuilder: FormBuilder,private adminService:AdminService){}\n  ngOnInit(): void {\n    this.roomBookingForm = this.formBuilder.group({\n      roomName: ['', [Validators.required, Validators.minLength(6)]],\n      roomType: ['', [Validators.required, Validators.minLength(3)]],\n      access: this.formBuilder.array([this.formBuilder.control('')],[Validators.maxLength(2)]),\n      capacity: [null, [Validators.required, Validators.min(1)]] ,\n      image:['',Validators.required]\n    });  \n    // this.imageUploadForm = this.formBuilder.group({\n    //   images: this.formBuilder.array([this.formBuilder.control('')], Validators.required)\n    // });\n  }\n\n  get roomName(){\n    return this.roomBookingForm.get('roomName');\n  }\n  get roomType(){\n    return this.roomBookingForm.get('roomType');\n  }\n  get access(){\n    return this.roomBookingForm.get('access') as FormArray;\n  }\n  get capacity(){\n    return this.roomBookingForm.get('capacity');\n  }\n  get image(){\n    return this.roomBookingForm.get('image');\n  }\n  // get images(){\n  //   return this.imageUploadForm.get('images') as FormArray;\n  // }\n\n  selectFile(event:any){\n    this.file= event.target.files[0]  \n  }\n  // addImage():void{\n  //   this.images.push(this.formBuilder.control(''))\n  // }\n  addAccess():void{\n    this.access.push(this.formBuilder.control(''));\n  }\n  \n\n  onSubmit() {\n    let formData=new FormData();\n    formData.append(\"profilePic\",this.file,this.file.name)\n    formData.append('roomObj',JSON.stringify(this.roomBookingForm.value))\n    \n    this.adminService.addRoom(formData).subscribe(res=>{\n      console.log(res);\n    })\n    \n\n  }\n\n}\n","<!-- <div class=\"container\">\n  <div class=\"row d-flex justify-content-center align-items-center \">\n    <div class=\"col\">\n      <div class=\"card card-registration my-4\">\n        <div class=\"row g-0 h-50\">\n          <div class=\"col-xl-6 d-none d-xl-block\">\n            <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-registration/img4.webp\"\n              alt=\"Sample photo\" class=\"img-fluid rounded\"\n              style=\" width:100%;height: 79% !important;border-top-left-radius: .25rem; border-bottom-left-radius: .25rem;\" />\n          </div>\n          <div class=\"col-xl-6\">\n            <form [formGroup]=\"employeeForm\" (ngSubmit)=\"onSubmit()\">\n              <div class=\"card-body p-md-5 text-black\">\n                <h5 class=\"mb-5 text-uppercase text-white w-50 rounded bg-danger mx-auto p-2 text-center\">Employee Add</h5 >\n\n                <div class=\"row \">\n                  <div class=\"col-md-6 mb-4\">\n                    <div class=\"form-outline mx-auto\">\n                      <label for=\"file-upload\" class=\"custom-file-upload form-label mt-2\">\n                        <i class=\"fa fa-cloud-upload text-primary\"></i> Upload profile pic\n                      </label>\n                      <input id=\"file-upload\" class=\"form-control form-control-lg\" type=\"file\" style=\"display: none;\"  (change)=\"selectFile($event)\" />\n                    </div>\n                  </div>\n                  <div class=\"col-md-6 mb-4\">\n                    <div class=\"form-outline border\">\n                      <input type=\"text\" id=\"employeename\" name=\"employeename\" class=\"form-control form-control-lg\" formControlName=\"employeeName\" />\n                      <label class=\"form-label\" for=\"employeename\">Employee name</label>\n                    </div>\n                    <div *ngIf=\"employeeName?.invalid && (employeeName?.dirty || employeeName?.touched)\" class=\"text-danger\">\n                      <p *ngIf=\"employeeName?.errors?.['required'] \">*name is must</p>\n                      <p *ngIf=\"employeeName?.errors?.['minlength'] \">*must be 6 character long</p>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-md-6 mb-4\">\n                      <div class=\"form-outline border\">\n                        <input type=\"email\" id=\"email\" class=\"form-control form-control-lg\" formControlName=\"email\"/>\n                        <label class=\"form-label\" for=\"email\">Email</label>\n                      </div>\n                      <div *ngIf=\"email?.invalid && (email?.dirty || email?.touched)\" class=\"text-danger\">\n                        <p *ngIf=\"email?.errors?.['required'] text-start\">*email is must</p>\n                        <p *ngIf=\"email?.errors?.['email']\">*email is invalid.</p>\n                      </div>\n                    </div>\n                    <div class=\"col-md-6 mb-4\">\n                      <div class=\"form-outline border\">\n                        <input type=\"text\" id=\"phoneno\" class=\"form-control form-control-lg\" formControlName=\"phoneNumber\" />\n                        <label class=\"form-label\" for=\"phoneno\">Phone number</label>\n                      </div>\n                      <div *ngIf=\"phoneNumber?.invalid && (phoneNumber?.dirty || phoneNumber?.touched)\" class=\"text-danger\">\n                        <p *ngIf=\"phoneNumber?.errors?.['required']\">*phoneno is must</p>\n                        <p *ngIf=\"phoneNumber?.errors?.['pattern']\">*phoneno is invalid.</p>\n                      </div>\n                    </div>\n                  </div>\n\n                \n\n                <div class=\"row\">\n                  <div class=\"col-md-6 mb-4\">\n\n                    <select class=\"select form-control\" formControlName=\"department\">\n                      <option value=\"Department\">Department</option>\n                      <option value=\"Product development\">Product development</option>\n                      <option value=\"Sales marketing\">Sales marketing</option>\n                      <option value=\"Finanace management\">Finanace management</option>\n                    </select>\n                    <div *ngIf=\"department?.invalid && (department?.dirty || department?.touched)\" class=\"text-danger\">\n                      <p *ngIf=\"department?.errors?.['required']\">*department is must</p>\n                    </div>\n\n                  </div>\n                  <div class=\"col-md-6 mb-4\">\n                    <select class=\"select form-control\" formControlName=\"module\">\n                      <option value=\"Module\" >Module</option>\n                      <option value=\"Core\">Core</option>\n                      <option value=\"Workflows\">Workflows</option>\n                      <option value=\"Payroll\">Payroll</option>\n                      <option value=\"Attandance\">Attandance</option>\n                      <option value=\"Recruitment\">Recruitment</option>\n                    </select>\n                    <div *ngIf=\"module?.invalid && (module?.dirty || module?.touched)\" class=\"text-danger\">\n                      <p *ngIf=\"module?.errors?.['required']\">*module is must</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col mb-4\">\n  \n                      <select class=\"select form-control\" formControlName=\"position\">\n                        <option value=\"Position\">Position</option>\n                        <option value=\"HOD\">HOD</option>\n                        <option value=\"Team Lead\">Team Lead</option>\n                        <option value=\"Intern\">Intern</option>\n                        <option value=\"Product Lead\">Product Lead</option>\n                        <option value=\"Project Manager\">Project Manager</option>\n                        <option value=\"Engineer Manager\">Engineer Manager</option>\n                      </select>\n                      <div *ngIf=\"position?.invalid && (position?.dirty || position?.touched)\" class=\"text-danger\">\n                        <p *ngIf=\"position?.errors?.['required']\">*position is must</p>\n                      </div>\n                    </div>\n                  </div>\n\n\n                <div class=\"d-flex justify-content-center pt-3\">\n                  <button type=\"button\" class=\"btn btn-danger btn-lg\">Reset all</button>\n                  <button type=\"submit\" class=\"btn btn-warning btn-lg ms-2\" [disabled]=\"(!employeeName?.valid) || (!email?.valid) || (!phoneNumber?.valid)|| (!password?.valid)|| (!confirmPassword?.valid) \">Submit form</button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div> -->\n\n<div class=\"container\">\n  <h2 class=\"text-center\">Room Adding Form</h2>\n  <form [formGroup]=\"roomBookingForm\" (ngSubmit)=\"onSubmit()\" class=\"needs-validation w-50 mx-auto\" >\n    <div class=\"form-group\">\n      <label class=\"form-label\" for=\"name\">Room Name:</label>\n      <input type=\"text\" class=\"form-control form-input\" id=\"name\" formControlName=\"roomName\">\n     <div class=\"text-danger\" *ngIf=\"roomName?.invalid && (roomName?.dirty || roomName?.touched)\">\n        <p *ngIf=\"roomName?.errors?.['required']\">* room name is required.</p>\n        <p *ngIf=\"roomName?.errors?.['minlength']\">*room name must be at least 6 characters long.</p>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"form-label\" for=\"roomType\">Room Type:</label>\n      <select class=\"form-control form-input\" id=\"roomType\" formControlName=\"roomType\" >\n        <option value=\"\">-- Select Room Type --</option>\n        <option value=\"Conference Room\">Conference Room</option>\n        <option value=\"Meeting Room\">Meeting Room</option>\n        <option value=\"Training Room\">Training Room</option>\n        <option value=\"Breakout Room\">Breakout Room</option>\n        <option value=\"Board Room\">Board Room</option>\n        <option value=\"Interview Room\">Interview Room</option>\n        <option value=\"Presentation Room\">Presentation Room</option>\n        <option value=\"Video Conference Room\">Video Conference Room</option>\n        <option value=\"Focus Room\">Focus Room</option>\n        <option value=\"Collaboration Room\">Collaboration Room</option>\n      </select>\n      <div class=\"text-danger\" *ngIf=\"roomType?.invalid && (roomType?.dirty || roomType?.touched)\">\n        Room type is required.\n      </div>\n    </div> \n    <label for=\"access\">Access:</label>\n    <div class=\"form-group\" formArrayName=\"access\" *ngFor=\"let acc of access?.controls;let i=index\">  \n      <select class=\"form-control select\"  [formControlName]=\"i\" >\n          <option value=\"\">Position</option>\n          <option value=\"HOD\">HOD</option>\n          <option value=\"Team Lead\">Team Lead</option>\n          <option value=\"Intern\">Intern</option>\n          <option value=\"Product Lead\">Product Lead</option>\n          <option value=\"Project Manager\">Project Manager</option>\n          <option value=\"Engineer Manager\">Engineer Manager</option>\n      </select>\n      <div class=\"text-danger\" *ngIf=\"access?.invalid && (access?.dirty || access?.touched)\">\n        * Access is required.\n      </div>\n    </div>\n    <button class=\"mt-2 btn btn-primary text-end\" type=\"button\" (click)=\"addAccess()\" [disabled]=\"!access.valid\"> Add</button>\n    <div class=\"form-group\">\n      <label for=\"capacity\">Capacity:</label>\n      <input type=\"number\" class=\"form-control\" id=\"capacity\" formControlName=\"capacity\" required>\n      <div class=\"text-danger\" *ngIf=\"capacity?.invalid && (capacity?.dirty || capacity?.touched)\">\n        <div *ngIf=\"capacity?.errors?.['required']\">Capacity is required.</div>\n        <div *ngIf=\"capacity?.errors?.['minlength']\">Capacity must be at least 1.</div>\n      </div>\n    </div>\n    <label for=\"image\">image:</label>\n    <div class=\"form-group\" [formGroup]=\"imageUploadForm\" formArrayName=\"image\" *ngFor=\"let image of image?.controls;let i=index\">\n      <input type=\"file\" class=\"form-control\" id=\"image\" [formControlName]=\"i\" >\n      <div class=\"text-danger\" *ngIf=\"image?.invalid && (image?.dirty || image?.touched)\">\n        image are required.\n      </div>\n    </div>\n    <button class=\"mt-2 btn btn-primary text-end\" type=\"button\" (click)=\"addImage()\" [disabled]=\"!image.valid\"> Add</button>\n    \n    <div class=\"text-center\">\n      <button type=\"submit\" class=\"btn btn-primary text-center px-5 mt-3\">Submit</button>\n    </div>\n     </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}